% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TokensApi.r
\docType{data}
\name{TokensApi}
\alias{TokensApi}
\title{Agave Token API operations}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
tokens <- TokenApi$new(apiClient, cache, client, username, password, responseType="list")
}
\description{
TokensApi Class

OAuth2 token api client to manage credentials and session caching.

Note: This class is NOT generated by the swagger code generator program.
}
\details{
The Tokens API is an OAuth2 endpoint handling all authentication and token
management for the Agave Platform.

In order to fetch an access token, you \emph{\strong{must}} have a valid, registered \link[rAgave:Client]{rAgave::Client}
> application. Please see the \link[rAgave:ClientsApi]{rAgave::ClientsApi} documentation for more on creating and
> managing client keys.\preformatted{api <- Agave$new(username="username", password="password"
                 clientKey="abcde", clientSecret="12345")

myClient <- api$clients$create(clientName = "my_client")

myToken = api$tokens$create(client=myClient)

api$reload(client=myClient, token=myToken)
}
}
\section{Arguments}{

\describe{

\code{apiClient} a \link[rAgave:ApiClient]{rAgave::ApiClient} instance preconfigured to speak to the Agave Platform.

\code{cache} an \link[rAgave:AgaveCache]{rAgave::AgaveCache} instance pointing to the persistent auth cache file on disk.

\code{client} a \link[rAgave:Client]{rAgave::Client} instance with valid key and secret for the tenant pointed
to by \code{apiClient}.

\code{username} the username that will be used to authenticate the user and obtain an access token.

\code{password} the password that will be used to authenticate the user and obtain an access token.

\code{responseType} the default object type methods of this class should return. Valid values are:
\itemize{
\item \strong{raw}: the raw JSON string response from the API. You may optionally include
\code{pretty=TRUE} in the method call to receive pretty printed JSON.
\item \strong{list}: a standard R list object. This is the default value.
\item \strong{dt}: a data table
}

}
}

\section{Methods}{

\describe{

\code{$impersonate(tokenUsername)} fetches a token for another user. To use this
method, you must have the "impersonator" role.

\strong{Usage}\preformatted{tokens$impersonate(tokenUsername="testuser")
tokens$impersonate(tokenUsername="testuser", username="username", password="password")
}

\code{$create(updateCache, client, username, password)} fetch a new token.

\strong{Usage}\preformatted{tokens$create()
tokens$create(updateCache=TRUE,username=myUsername, password=myPassword, client=myClient)
}

\code{$refresh(updateCache, client, refreshToken)} refresh the current token using the
refreshToken cached on disk or provided to the method.

\strong{Usage}\preformatted{tokens$refresh()
tokens$refresh(refreshToken=myRefreshToken, client=myClient)
}

`$revoke(updateCache, client, accessToken)`` revoke the given access token or
invalidate the one cached on disk.

\strong{Usage}\preformatted{tokens$revoke()
tokens$revoke(accessToken="zyxwvut")
}

\code{$loadFromSystemConfiguration()} Read the local auth cache file and, if a token
is found, load and use that.

\strong{Usage}\preformatted{tokens$loadFromSystemConfiguration()
}

}
}

\seealso{
\link[rAgave:Token]{rAgave::Token} \link[rAgave:ClientsApi]{rAgave::ClientsApi} \link[rAgave:Client]{rAgave::Client}
}
\keyword{datasets}
