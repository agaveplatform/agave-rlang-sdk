% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MonitorsApi.r
\docType{data}
\name{MonitorsApi}
\alias{MonitorsApi}
\title{Agave Monitors API operations}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
monitors <- MonitorsApi$new( apiClient = ApiClient$new(), cache = AgaveCache$new() )
}
\description{
MonitorsApi Class
}
\details{
The Agave Monitors API provides a familiar paradigm for monitoring the use ability and accessibility of storage and execution systems you registered with Agave. Similar to services like Pingdom, Pagerduty, and WebCron, the Monitors API allows you to to create regular health checks on a registered system. Unlike standard uptime services, Agave will check that your system is responsive and accessible by performing proactive tests on availability (ping), accessibility (authentication), and functionality (listing or echo). Each check result is persisted and the check history of a given monitor is queryable through the API. As with all resources in the Agave Platform, a full event model is available so you can subscribe to event you care about such as failed checks, restored system availability, and system disablement.

Read more about the Monitors API in the \href{http://docs.agaveplatform.org/#/monitors}{Agave Developer's Guide}
}
\section{Arguments}{

\describe{

\code{apiClient} a \link[rAgave:ApiClient]{rAgave::ApiClient} instance preconfigured to speak to the Agave Platform.

\code{cache} an \link[rAgave:AgaveCache]{rAgave::AgaveCache} instance pointing to the persistent auth cache file on disk.

\code{responseType} the default object type methods of this class should return. Valid values are:
\itemize{
\item \strong{raw}: the raw JSON string response from the API. You may optionally include
\code{pretty=TRUE} in the method call to receive pretty printed JSON.
\item \strong{list}: a standard R list object. This is the default value.
\item \strong{dt}: a data table
}

}
}

\section{Methods}{

\describe{

\code{$addMonitoringTasks()} Add a new monitoring task

\strong{Usage}\preformatted{monitors$addMonitoringTasks$listMonitors(body, naked, )
}

\code{$deleteMonitoringTask()} Deletes a monitor.

\strong{Usage}\preformatted{monitors$deleteMonitoringTask$listMonitors(monitorId, naked, )
}

\code{$forceMonitoringTaskCheck()} Forces a monitor check to run.

\strong{Usage}\preformatted{monitors$forceMonitoringTaskCheck$listMonitors(monitorId, naked, )
}

\code{$getMonitoringTask()} Retrieve a specific monitor.

\strong{Usage}\preformatted{monitors$getMonitoringTask$listMonitors(monitorId, naked, search, )
monitors$getMonitoringTask$listMonitors(search=list("foo"="bar"))
}

\code{$getMonitoringTaskCheck()} Retrieve a specific monitor check

\strong{Usage}\preformatted{monitors$getMonitoringTaskCheck$listMonitors(monitorId, checkId, naked, search, )
monitors$getMonitoringTaskCheck$listMonitors(search=list("foo"="bar"))
}

\code{$listMonitoringTaskChecks()} Retrieve checks for a specific monitor

\strong{Usage}\preformatted{monitors$listMonitoringTaskChecks$listMonitors(monitorId, naked, startDate, endDate, result, limit, offset, search, )
monitors$listMonitoringTaskChecks$listMonitors(search=list("foo"="bar"))
}

\code{$listMonitoringTasks()} Retrieve Monitor for a specific resource.

\strong{Usage}\preformatted{monitors$listMonitoringTasks$listMonitors(naked, target, active, limit, offset, search, )
monitors$listMonitoringTasks$listMonitors(search=list("foo"="bar"))
}

\code{$updateMonitoringTask()} Updates an existing monitor.

\strong{Usage}\preformatted{monitors$updateMonitoringTask$listMonitors(body, naked, monitorId, )
}

}
}

\seealso{
\link[rAgave:ApiClient]{rAgave::ApiClient} \link[rAgave:Agave]{rAgave::Agave} [rAgave::MonitoringTaskCheck][rAgave::MonitoringTaskDetails][rAgave::MonitoringTaskSummary]
}
\keyword{datasets}
