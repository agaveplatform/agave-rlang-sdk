{{>partial_header}}
{{#operations}}
#' @title {{baseName}} operations
#' @description {{importPath}}
#'
#' @importFrom R6 R6Class
#'
#' @section Methods:
#' \describe{
{{#operation}}
#'
#' {{operationIdLowerCamelCase}} {{#summary}}{{summary}}{{/summary}}{{^summary}}{{notes}}{{/summary}}
#'
{{/operation}}
#' }
#'
#' @export
{{classname}} <- R6::R6Class(
  '{{classname}}',
  private = list(
    userAgent = "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{{packageVersion}}}/r{{/httpUserAgent}}",
    apiClient = NULL
  ),
  public = list(
    initialize = function(apiClient){
      if (!missing(apiClient)) {
        private$apiClient <- apiClient
      }
      else {
        private$apiClient <- ApiClient$new()
      }
    },
    {{#operation}}
    {{operationIdLowerCamelCase}} = function({{#allParams}}{{baseName}}, {{/allParams}}{{#isRestfulIndex}}search, {{/isRestfulIndex}} ...){
      args <- list(...)
      queryParams <- list()
      headerParams <- character()

      {{#hasHeaderParams}}
      {{#headerParams}}
      if (!missing(`{{baseName}}`)) {
        headerParams['{{baseName}}'] <- `{{paramName}}`
      }

      {{/headerParams}}
      {{/hasHeaderParams}}
      {{#isRestfulIndex}}
      if (!missing(search)) {
        queryParams <- search
      }

      {{/isRestfulIndex}}
      {{#hasQueryParams}}
      {{#queryParams}}
      if (!missing(`{{baseName}}`)) {
        queryParams['{{baseName}}'] <- {{baseName}}
      }

      {{/queryParams}}
      {{/hasQueryParams}}
      {{#hasFormParams}}
      body <- list(
        {{#formParams}}
          {{^isFile}}
          "{{baseName}}" = {{baseName}}{{#hasMore}},{{/hasMore}}
          {{/isFile}}
          {{#isFile}}
          "{{baseName}}" = httr::upload_file({{baseName}}){{#hasMore}},{{/hasMore}}
          {{/isFile}}
        {{/formParams}}
      )

      {{/hasFormParams}}
      {{#hasBodyParam}}
      {{#bodyParams}}
      if (!missing(`{{baseName}}`)) {
        if (!is.list(`body`)) {
          body <- `{{baseName}}`$toJSON()
        }
      } else {
        body <- NULL
      }

      {{/bodyParams}}
      {{/hasBodyParam}}
      urlPath <- "{{path}}"
      {{#hasPathParams}}
      {{#pathParams}}
      if (!missing(`{{baseName}}`)) {
        urlPath <- gsub(paste0("\\{", "{{baseName}}", "\\}"), `{{baseName}}`, urlPath)
      }

      {{/pathParams}}
      {{/hasPathParams}}
      resp <- private$apiClient$callApi(url = paste0(private$apiClient$basePath, urlPath),
                                 method = "{{httpMethod}}",
                                 queryParams = queryParams,
                                 headerParams = headerParams,
                                 body = body,
                                 ...)

      if (httr::status_code(resp) >= 200 && httr::status_code(resp) <= 299) {
        {{#returnType}}
        logger.debug(jsonlite::toJSON(httr::content(resp), auto_unbox=TRUE, null="null", na="null"))
        {{#isListContainer}}
        jsonResp <- httr::content(resp)
        if ("result" %in% names(jsonResp)) {
          jsonResp <- jsonResp$result
        }
        jsonResp
        {{/isListContainer}}
        {{^isListContainer}}
        jsonResp <- httr::content(resp)
        if ("result" %in% names(jsonResp)) {
          jsonResp <- jsonResp$result
        }
        jsonResp
        {{/isListContainer}}
        {{/returnType}}
        {{^returnType}}
        # void response, no need to return anything
        {{/returnType}}
      } else if (httr::status_code(resp) >= 400 && httr::status_code(resp) <= 499) {
        logger.warn(jsonlite::toJSON(httr::content(resp), auto_unbox=TRUE, null="null", na="null"))
        httr::content(resp)
      } else if (httr::status_code(resp) >= 500 && httr::status_code(resp) <= 599) {
        logger.warn(jsonlite::toJSON(httr::content(resp), auto_unbox=TRUE, null="null", na="null"))
        httr::content(resp)
      }

    }{{#hasMore}},{{/hasMore}}
    {{/operation}}
  )
)
{{/operations}}
