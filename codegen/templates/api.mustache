{{>partial_header}}
{{#operations}}{{#operation}}{{#-first}}{{#tags}}{{#-first}}
#' {{description}}
#'
#' Read more about the {{baseName}} API in the [Agave Developer's Guide](http://docs.agaveplatform.org/#/{{classVarName}})
#'
{{/-first}}{{/tags}}{{/-first}}{{/operation}}#' @title Agave {{baseName}} API operations
#' @description
#' {{classname}} Class
#'
#' @section Arguments:
#' \describe{
#'
#' `apiClient` a [rAgave::ApiClient] instance preconfigured to speak to the Agave Platform.
#'
#' `cache` an [rAgave::AgaveCache] instance pointing to the persistent auth cache file on disk.
#'
#' `responseType` the default object type methods of this class should return. Valid values are:
#' * **raw**: the raw JSON string response from the API. You may optionally include
#'   `pretty=TRUE` in the method call to receive pretty printed JSON.
#' * **list**: a standard R list object. This is the default value.
#' * **dt**: a data table
#'
#' }
#'
#' @usage
#' {{classVarName}} <- {{classname}}$new( apiClient = ApiClient$new(), cache = AgaveCache$new() )
#'
#' @importFrom R6 R6Class
#'
#' @section Methods:
#' \describe{
{{#operation}}
#'
#' `${{operationIdLowerCamelCase}}()` {{#summary}}{{summary}}{{/summary}}{{^summary}}{{notes}}{{/summary}}
#'
#' **Usage**
#'
#' ```
#' {{classVarName}}${{operationIdLowerCamelCase}}$list{{baseName}}({{#allParams}}{{baseName}}, {{/allParams}}{{#isRestfulIndex}}search, {{/isRestfulIndex}})
{{#isRestfulIndex}}
#' {{classVarName}}${{operationIdLowerCamelCase}}$list{{baseName}}(search=list("foo"="bar"))
{{/isRestfulIndex}}
#' ```
#'
{{/operation}}
#' }
#'
#' @name {{classname}}
#' @seealso  [rAgave::ApiClient] [rAgave::Agave] {{#imports}}[rAgave::{{import}}]{{/imports}}
#' @export
{{classname}} <- R6::R6Class(
  '{{classname}}',
  private = list(
    userAgent = "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Agave-SDK/{{{packageVersion}}}/r{{/httpUserAgent}}",
    apiClient = NULL,
    responseType = "list",
    formatResponse = function(resp, args=list()) {

      # read the args from the unnamed request args
      if ("responseType" %in% names(args)) {
        responseType = args$responseType
      }
      else {
        responseType = NULL
      }

      if (is.null(responseType) || nchar(responseType) == 0) {
        responseType = private$responseType
      }

      if (httr::status_code(resp) >= 200 && httr::status_code(resp) <= 299) {
        logger.debug(jsonlite::toJSON(httr::content(resp,stringsAsFactors = FALSE), auto_unbox=TRUE, null="null", na="null"))

        if (responseType == "raw") {
          # check for the undeclared pretty attibute to pretty-print the json response
          prettyPrint <- ("pretty" %in% names(args) && isTRUE(args$pretty))
          jsonlite::toJSON(httr::content(resp, stringsAsFactors = FALSE), auto_unbox=TRUE, null="null", na="null", pretty=prettyPrint)
        }
        else {
          jsonResp <- httr::content(resp)
          if ("result" %in% names(jsonResp)) {
            jsonResp <- jsonResp$result
          }

          if ((responseType == "df" || responseType == "dataframe") && length(jsonResp) > 0) {
            # lookup properties of object. if null, it's a list. if not null, it's an object
            colNames <- names(jsonResp)
            if (is.null(colNames)) {
              # convert to a list of dataframes
              do.call("rbind", lapply(jsonResp, as.data.frame, col.names=factor(names(jsonResp[[1]]))))
            }
            else {
              # convert object to single data frame
              as.data.frame(jsonResp)
            }
          }
          else {
            jsonResp
          }
        }
      } else if (httr::status_code(resp) >= 400 && httr::status_code(resp) <= 499) {
        logger.warn(jsonlite::toJSON(httr::content(resp, "text", encoding="UTF-8"), auto_unbox=TRUE, null="null", na="null"))
        httr::content(resp)
      } else if (httr::status_code(resp) >= 500 && httr::status_code(resp) <= 599) {
        logger.warn(jsonlite::toJSON(httr::content(resp, "text", encoding="UTF-8"), auto_unbox=TRUE, null="null", na="null"))
        httr::content(resp)
      }
    }
  ),
  public = list(
    initialize = function(apiClient, responseType){
      if (!missing(apiClient)) {
        private$apiClient <- apiClient
      }
      else {
        private$apiClient <- ApiClient$new()
      }

      # user can override the global representation in which resources
      # responses from this API are returned in when calling methods of
      # this class. The same responseType attribute may be passed to any
      # public method to override individual calls as well.
      if (missing(responseType) || is.null(responseType) || nchar(responseType) == 0) {
        # we ignore and use the default
      }
      else if (responseType != "raw" && responseType != "list" && responseType != "df") {
        stop("Invalid responseType. Please specify one of: raw, list, df")
      }
      else {
        # set the response type to the class default to be used
        # whenever it is not explicitly set on a request
        private$responseType = responseType
      }
    },
    {{#operation}}
    {{operationIdLowerCamelCase}} = function({{#allParams}}{{baseName}}, {{/allParams}}{{#isRestfulIndex}}search, {{/isRestfulIndex}} ...){
      args <- list(...)
      queryParams <- list()
      headerParams <- character()

      {{#hasHeaderParams}}
      {{#headerParams}}
      if (!missing(`{{baseName}}`)) {
        headerParams['{{baseName}}'] <- `{{paramName}}`
      }

      {{/headerParams}}
      {{/hasHeaderParams}}
      {{#isRestfulIndex}}
      if (!missing(search)) {
        queryParams <- search
      }

      {{/isRestfulIndex}}
      {{#hasQueryParams}}
      {{#queryParams}}
      if (!missing(`{{baseName}}`)) {
        queryParams['{{baseName}}'] <- {{baseName}}
      }

      {{/queryParams}}
      {{/hasQueryParams}}
      {{#hasFormParams}}
      body <- list(
        {{#formParams}}
          {{^isFile}}
          "{{baseName}}" = {{baseName}}{{#hasMore}},{{/hasMore}}
          {{/isFile}}
          {{#isFile}}
          "{{baseName}}" = httr::upload_file({{baseName}}){{#hasMore}},{{/hasMore}}
          {{/isFile}}
        {{/formParams}}
      )

      {{/hasFormParams}}
      {{#hasBodyParam}}
      {{#bodyParams}}
      if (!missing(`{{baseName}}`)) {
        if (!is.list(`body`)) {
          body <- `{{baseName}}`$toJSON()
        }
      } else {
        body <- NULL
      }

      {{/bodyParams}}
      {{/hasBodyParam}}
      urlPath <- "{{path}}"
      {{#hasPathParams}}
      {{#pathParams}}
      if (!missing(`{{baseName}}`)) {
        urlPath <- gsub(paste0("\\{", "{{baseName}}", "\\}"), `{{baseName}}`, urlPath)
      }

      {{/pathParams}}
      {{/hasPathParams}}
      resp <- private$apiClient$callApi(url = paste0(private$apiClient$basePath, urlPath),
                                 method = "{{httpMethod}}",
                                 queryParams = queryParams,
                                 headerParams = headerParams,
                                 body = body,
                                 ...)

      # Send the response to the common filtering method to marshal the
      # response into the format requested by the user in the Agave global
      # configuration, API class instance, or individual method invocation.
      private$formatResponse(resp, args);

    }{{#hasMore}},{{/hasMore}}
    {{/operation}}
  )
)
{{/operations}}
